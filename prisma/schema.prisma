// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// for mongodb
// model FeatureCollection {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   type      String
//   color     String
//   features  Feature[]
//   createdAt DateTime  @default(now())
// }

// model Feature {
//   id         String       @id @default(auto()) @map("_id") @db.ObjectId
//   type       String
//   properties Properties[]
//   geometry   Geometry[]
//   createdAt  DateTime     @default(now())

//   featureCollectionId String            @db.ObjectId
//   FeatureCollection   FeatureCollection @relation(fields: [featureCollectionId], references: [id])
// }

// model Properties {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   data      Json
//   createdAt DateTime @default(now())

//   featureId String  @db.ObjectId
//   Feature   Feature @relation(fields: [featureId], references: [id])
// }

// model Geometry {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   type        String
//   coordinates Json
//   createdAt   DateTime @default(now())

//   featureId String  @db.ObjectId
//   Feature   Feature @relation(fields: [featureId], references: [id])
// }

// for mysql
model FeatureCollection {
  id        Int       @id @default(autoincrement())
  name      String
  type      String
  color     String
  weight    Int?      @default(1)
  dashed    Boolean?  @default(false)
  radius    Int?      @default(5)
  features  Feature[]
  createdAt DateTime  @default(now())
}

model Feature {
  id         Int          @id @default(autoincrement())
  type       String
  properties Properties[]
  geometry   Geometry[]
  createdAt  DateTime     @default(now())

  featureCollectionId Int               @map("featureCollectionId")
  FeatureCollection   FeatureCollection @relation(fields: [featureCollectionId], references: [id], onDelete: Cascade)
}

model Photo {
  id          Int     @id @default(autoincrement())
  path        String
  url         String
  description String?

  createdAt DateTime @default(now())

  propertyId Int        @map("propertyId")
  Property   Properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Properties {
  id     Int     @id @default(autoincrement())
  data   Json
  photos Photo[]
  // baik        Float?  @default(0) // Kon_Baik_1
  // sedang      Float?  @default(0) // Kon_Sdg_1
  // rusakRingan Float?  @default(0) // Kon_Rgn_1
  // rusakBerat  Float?  @default(0) // Kon_Rusa_1
  // mantap      Float?  @default(0) // Kon_Mntp_1
  // tidakMantap Float?  @default(0) // Kon_T_Mn_1
  // perkerasan  String? // Tipe_Ker_1

  createdAt DateTime @default(now())

  featureId Int     @map("featureId")
  Feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model Geometry {
  id          Int      @id @default(autoincrement())
  type        String
  coordinates Json
  createdAt   DateTime @default(now())

  featureId Int     @map("featureId")
  Feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  // role: admin, operator, opd
  role     Role     @default(OPD)
  Report   Report[]
}

enum Role {
  ADMIN
  OPERATOR
  OPD
}

model Report {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?
  file        String
  createdAt   DateTime @default(now())

  createdBy Int  @map("createdBy")
  user      User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

// struktur data baru untuk tiap 200meter
// tabel ruas = data umum jalan (
//   Nomor Ruas
//   Nama Ruas
//   Kecamatan yang dilalui
//   Panjang SK
//   Lebar
//   Keterangan
// )

// tabel sta = data ruas ruas (
//   id
//   Nomor Ruas (FK)
//   STA
//   X_awal
//   Y_awal
//   X_akhir
//   Y_akhir
//   Kondisi
//   Perkerasan
// )

model Jalan {
  id   Int    @id @default(autoincrement())
  nama String @unique
  ruas Ruas[]
}

model Ruas {
  nomorRuas  Int      @id
  idJalan    Int      @map("idJalan")
  namaRuas   String
  kecamatan  String
  panjangSK  Float
  lebar      Float
  keterangan String?
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())

  jalan    Jalan            @relation(fields: [idJalan], references: [id], onDelete: Cascade)
  sta      Sta[]
  pictures PicturesOnRuas[]
  history  RuasHistory[]
}

model RuasHistory {
  id         Int      @id @default(autoincrement())
  nomorRuas  Int      @map("nomorRuas")
  namaRuas   String
  kecamatan  String
  panjangSK  Float
  lebar      Float
  keterangan String?
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())

  pictures      PicturesOnRuasHistory[]
  Ruas          Ruas?                   @relation(fields: [ruasNomorRuas], references: [nomorRuas])
  ruasNomorRuas Int?
}

model PicturesOnRuas {
  idRuas    Int @map("idRuas")
  idPicture Int @map("idPicture")

  description String?

  ruas    Ruas    @relation(fields: [idRuas], references: [nomorRuas], onDelete: Cascade)
  picture Picture @relation(fields: [idPicture], references: [id], onDelete: Cascade)

  @@id([idRuas, idPicture])
}

model PicturesOnRuasHistory {
  idRuasHistory Int @map("idRuasHistory")
  idPicture     Int @map("idPicture")

  description String?

  ruasHistory RuasHistory @relation(fields: [idRuasHistory], references: [id], onDelete: Cascade)
  picture     Picture     @relation(fields: [idPicture], references: [id], onDelete: Cascade)

  @@id([idRuasHistory, idPicture])
}

model Sta {
  id          Int      @id @default(autoincrement())
  nomorRuas   Int      @map("nomorRuas")
  sta         String
  xAwal       Float
  yAwal       Float
  xAkhir      Float
  yAkhir      Float
  kondisi     String
  perkerasan  String
  coordinates Json
  createdAt   DateTime @default(now())

  ruas     Ruas            @relation(fields: [nomorRuas], references: [nomorRuas], onDelete: Cascade)
  history  StaHistory[]
  pictures PicturesOnSta[]
}

model StaHistory {
  id          Int      @id @default(autoincrement())
  idSta       Int      @map("idSta")
  nomorRuas   Int      @map("nomorRuas")
  sta         String
  xAwal       Float
  yAwal       Float
  xAkhir      Float
  yAkhir      Float
  kondisi     String
  perkerasan  String
  coordinates Json
  createdAt   DateTime @default(now())

  Sta      Sta                    @relation(fields: [idSta], references: [id], onDelete: Cascade)
  pictures PicturesOnStaHistory[]
}

model Picture {
  id        Int      @id @default(autoincrement())
  path      String
  createdAt DateTime @default(now())

  stas        PicturesOnSta[]
  stasHistory PicturesOnStaHistory[]
  ruas        PicturesOnRuas[]
  ruasHistory PicturesOnRuasHistory[]
}

model PicturesOnSta {
  idSta     Int @map("idSta")
  idPicture Int @map("idPicture")

  description String?

  sta     Sta     @relation(fields: [idSta], references: [id], onDelete: Cascade)
  picture Picture @relation(fields: [idPicture], references: [id], onDelete: Cascade)

  @@id([idSta, idPicture])
}

model PicturesOnStaHistory {
  idStaHistory Int @map("idStaHistory")
  idPicture    Int @map("idPicture")

  description String?

  staHistory StaHistory @relation(fields: [idStaHistory], references: [id], onDelete: Cascade)
  picture    Picture    @relation(fields: [idPicture], references: [id], onDelete: Cascade)

  @@id([idStaHistory, idPicture])
}
